module SkelGrammar where

-- Haskell module generated by the BNF converter

import AbsGrammar
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident string -> failure x
transLIdent :: LIdent -> Result
transLIdent x = case x of
  LIdent string -> failure x
transUIdent :: UIdent -> Result
transUIdent x = case x of
  UIdent string -> failure x
transProgram :: Program -> Result
transProgram x = case x of
  Prog instrs -> failure x
transInstr :: Instr -> Result
transInstr x = case x of
  IDecl decl -> failure x
  IType typedef -> failure x
  IExpr expr -> failure x
transDecl :: Decl -> Result
transDecl x = case x of
  Decl lident args expr type_ -> failure x
transTypeDef :: TypeDef -> Result
transTypeDef x = case x of
  TypeDef uident lidents constrs -> failure x
transConstr :: Constr -> Result
transConstr x = case x of
  Constr uident types -> failure x
transType :: Type -> Result
transType x = case x of
  TArr type_1 type_2 -> failure x
  TVar lident -> failure x
  TType constr -> failure x
transArg :: Arg -> Result
transArg x = case x of
  Arg lident type_ -> failure x
transPattern :: Pattern -> Result
transPattern x = case x of
  PConstr uident patterns -> failure x
  PVar lident -> failure x
  PInt integer -> failure x
  PBool boolean -> failure x
  PWildcard -> failure x
transMatching :: Matching -> Result
transMatching x = case x of
  Matching pattern expr -> failure x
transBoolean :: Boolean -> Result
transBoolean x = case x of
  BTrue -> failure x
  BFalse -> failure x
transExpr :: Expr -> Result
transExpr x = case x of
  ELambda arg args expr -> failure x
  ELet decls expr -> failure x
  EIfte expr1 expr2 expr3 -> failure x
  EMatch expr matchings -> failure x
  EOr expr1 expr2 -> failure x
  EAnd expr1 expr2 -> failure x
  EEq expr1 expr2 -> failure x
  ENeq expr1 expr2 -> failure x
  ELeq expr1 expr2 -> failure x
  ELes expr1 expr2 -> failure x
  EGre expr1 expr2 -> failure x
  EGeq expr1 expr2 -> failure x
  EAdd expr1 expr2 -> failure x
  ESub expr1 expr2 -> failure x
  EMul expr1 expr2 -> failure x
  EDiv expr1 expr2 -> failure x
  EApply expr1 expr2 -> failure x
  EInt integer -> failure x
  EBool boolean -> failure x
  EVar lident -> failure x
  EConstr uident -> failure x
  EData uident exprs -> failure x

